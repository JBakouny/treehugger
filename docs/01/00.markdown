---
out: introduction.html
---

I heard you like code, so...
----------------------------

treehugger lets you treat Scala code as data (case classes), and data as code (treehugger DSL) so you can code while you code.

For example, here's treehugger DSL for Hello World:

```console
scala> import treehugger.forest._, definitions._, treehuggerDSL._
scala> val tree: Tree = Predef_println APPLY LIT("Hello, world!")
scala> treeToString(tree)
```

The result of the `tree` shows the structure,
and `treeToString(tree)` shows the Scala source code represented by the tree.
Because it is responsible for formatting of the `String`, your code generating code would be more clear using treehugger.

### Classy example

Let's omit the import statements, and `println` statements from here. Here's how treehugger DSL defines classes:

```console
scala> :paste
object sym {
  val IntQueue = RootClass.newClass("IntQueue")
  val BasicIntQueue = RootClass.newClass("BasicIntQueue")
  val buf = BasicIntQueue.newValue("buf")
}

val tree1 = CLASSDEF(sym.IntQueue) withFlags(Flags.ABSTRACT) := BLOCK(
  DEF("get", IntClass),
  PROC("put") withParams(PARAM("x", IntClass))
)

val tree2 = CLASSDEF(sym.BasicIntQueue) withParents(sym.IntQueue) := BLOCK(
  VAL(sym.buf) withFlags(Flags.PRIVATE) :=
    NEW(ArrayBufferClass TYPE_OF IntClass),
  DEF("get", IntClass) := REF(sym.buf) DOT "remove" APPLY(),
  PROC("put") withParams(PARAM("x", IntClass)) := BLOCK(
    REF(sym.buf) INFIX("+=") APPLY REF("x")
  )
)
```

Let's print them out:

```console
scala> treeToString(tree1)
scala> treeToString(tree2)
```

Notice some of the symbols were defined upfront so we could avoid typing in string names.

### Thanks scalac!

To be clear where the credit is due, the majority of treehugger's code is borrowed from the Scala compiler (`scalac`) written by Martin Odersky, Paul Phillips, and others. treehugger just took it further to fit its needs.
