---
out: introduction.html
---
I heard you like code...
------------------------

treehugger lets you treat Scala code as data (case classes), and data as code (treehugger DSL).

For example, here's treehugger DSL for Hello World:

```scala
import treehugger.forest._
import definitions._
import treehuggerDSL._

val tree: Tree = Predef_println APPLY LIT("Hello, world!")

println(tree)
println(treeToString(tree))
```

The above code prints two lines:

```scala
Apply(Ident(println),List(Literal(Constant(Hello, world!))))
println("Hello, world!")
```

The first line shows the structure of the returned _tree_, and the second line is the Scala source code represented by the tree. Because it is responsible for formatting of the `string`, your code generating code would be more clear using treehugger.

### Thanks scalac!

To be clear where the credit is due, the majority of treehugger's code is borrowed from the Scala compiler (`scalac`) written by Martin Odersky, Paul Phillips, and others. treehugger just took it further to fit its needs.
