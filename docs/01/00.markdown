I heard you like to code...
---------------------------

It's sometimes convenient to write code that generates code. Unfortunately, it's been done mostly in sloppy stringly typed fashion in Scala. treehugger lets you treat Scala code as data (case classes), and data as code (treehugger DSL).

For example, here's treehugger DSL for Hello World:

```scala
Predef_println APPLY LIT("Hello, world!")
```

The above returns the following _tree_:

```scala
Apply(Ident(println),List(Literal(Constant(Hello, world!))))
```

By calling `treeToString(tree)`, it can be turned into Scala source code:

```scala
println("Hello, world!")
```

Because it is responsible for formatting of the `string`, code generating code would be more clear using treehugger.

To be clear where the credit is due, the majority of treehugger's code is borrowed from the Scala compiler (`scalac`) written by Martin Odersky, Paul Phillips, and others. treehugger just took it further to fit its needs.
