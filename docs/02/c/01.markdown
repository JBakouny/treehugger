---
out: val.html
---

Values
------

### Abstract value declarations

Abstract value declarations are written by wrapping the name and the type with `VAL(...)`:

```console:new
scala> import treehugger.forest._, definitions._, treehuggerDSL._
scala> val tree = (VAL("foo", IntClass): Tree)
scala> treeToString(tree)
```

or in general:

```scala
VAL(sym|"x", typ|"C").tree
```

where `sym` is a symbol and `typ` is a type of the value. In the above code, `sym|"x"` denotes that either a symbol or `String` is accepted as the name of the value, and `type|"C"` denotes that either a type or `String` is accepted as the type of the value.

Calling `tree` method creates a `Tree` without a right-hand side (rhs) expression. Because there's an implicit conversion, forcing `VAL(...)` as a `Tree` automatically calls `tree` method.

### Value definitions

Value definitions are written by appending right-hand side tree after `:=` as follows:

```console
scala> val tree2 = VAL("foo", IntClass) := LIT(0)
scala> treeToString(tree2)
```

Like Scala, the type annotation can be omitted when rhs is provided:

```console
scala> val tree3 = VAL("foo") := LIT(0)
scala> treeToString(tree3)
```

In addition, a symbol could be used to define a value instead of using `String` names.

```console
scala> object sym {
  val foo = RootClass.newValue("foo")
}
scala> val tree4 = VAL(sym.foo) := LIT(0)
scala> treeToString(tree4)
```

For a larger code base, using symbols makes the code more readable.

The general form of constant value definitions are:

```scala
VAL(sym|"x", [typ]) := rhs
```

### Lazy values

Lazy value declarations are written using `LAZYVAL(...)`:

```console
scala> val tree5 = (LAZYVAL("foo", IntClass): Tree)
scala> treeToString(tree5)
```

and lazy value definitions are written as:

```console
scala> val tree6 = LAZYVAL("foo", IntClass) := LIT(0)
scala> treeToString(tree6)
```

### Final values

Final value definitions are written by appending `withFlags(...)` after `VAL(...)`:

```console
scala> val tree7 = VAL("foo", IntClass) withFlags(Flags.FINAL) := LIT(0)
scala> treeToString(tree7)
```

### Pattern values

There is another form of value definitions called pattern values, but it will be discussed later.
