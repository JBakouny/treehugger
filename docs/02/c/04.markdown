---
out: def.html
---

Functions
---------

### Abstract function declarations

Abstract function declarations are written using `DEF(...)` or `PROC(...)`. Optionally, parameter lists can be specified using `withParams(PARAM(...), ...)` and type parameters can be specified using `withTypeParams(TYPEVAR(...), ...)`:

```console:new
scala> import treehugger.forest._, definitions._, treehuggerDSL._
scala> val tree = DEF("get", IntClass).tree
scala> val tree2 = (DEF("sideEffect", UnitClass) withParams()).tree
scala> val tree3 = (PROC("put") withParams(PARAM("x", IntClass))).tree
scala> object sym {
  val A = RootClass.newAliasType("A")
  val B = RootClass.newAliasType("B")
}
scala> val tree4 = (DEF("compare", BooleanClass)
  withTypeParams(TYPEVAR(sym.A))
  withParams(PARAM("a", sym.A) := LIT(0))
  withParams(PARAM("b", sym.A) := LIT(0)): Tree)
```

The above examples print as:

```console
scala> treeToString(tree)
scala> treeToString(tree2)
scala> treeToString(tree3)
scala> treeToString(tree4)
```

In genral, for functions with return type:

```scala
(DEF("get"|sym, typ)
  [withParams(PARAM("x"|sym, typ|"C")[ := arg], ...)]*
  [withTypeParams(TYPEVAR(...), ...)]).tree
```

For procedures:

```scala
(PROC("get"|sym)
  [withParams(PARAM("x"|sym, typ|"C")[ := arg], ...)]*
  [withTypeParams(TYPEVAR(...), ...)]).tree
```

### Function definition

Function definitions are written by appending right-hand side tree after `:=` as follows:

```console
scala> val tree5 = DEF("get", IntClass) := LIT(0)
scala> treeToString(tree5)
```

The result type can be omitted using `DEF(...)` as follows:

```console
scala> val tree6 = DEF("get") := LIT(0)
scala> treeToString(tree6)
```

When rhs is a `BLOCK(tree, ...)` you need to use `DEFINFER(...)` to differentiate from procedures (`PROC` was added in 0.4.0).

```console
scala> val tree7 = DEFINFER("get") := BLOCK(LIT(0))
scala> treeToString(tree7)
```

### Procedures

Procedure definitions are written using `PROC(...)` with `BLOCK(tree, ...)` for the rhs:

```console
scala> val tree8 = PROC("write") withParams(PARAM("str", StringClass)) := BLOCK(
  LIT(0)
)
scala> treeToString(tree8)
```

### Currying

Note `withParams(...)` clause may be added multiple times, each forming a parameter list:

```console
scala> val tree9 = (DEF("compare")
  withTypeParams(TYPEVAR(sym.A))
  withParams(PARAM("a", sym.A))
  withParams(PARAM("b", sym.A))) := FALSE
scala> treeToString(tree9)
```

### Default parameters

Similar to `VAL(...)`, `PARAM(...)` can be followed by `:=` and rhs to specify the default argument:

```console
scala> val tree10 = (DEF("compare")
  withTypeParams(TYPEVAR(sym.A))
  withParams(PARAM("a", sym.A) := LIT(0))
  withParams(PARAM("b", sym.A) := LIT(0))) := FALSE
scala> treeToString(tree10)
```

### By-name parameters

By-name parameters are written using `TYPE_BYNAME(typ)` as follows:

```console
scala> val tree11 = (PROC("whileLoop")
  withParams(PARAM("cond", TYPE_BYNAME(BooleanClass)))
  withParams(PARAM("stat", TYPE_BYNAME(UnitClass))): Tree)
scala> treeToString(tree11)
```

### Repeated parameters

Repeated parameters are written using `TYPE_*(typ)` as follows:

```console
scala> val tree12 = (DEF("sum", IntClass)
  withParams(PARAM("args", TYPE_*(IntClass))): Tree)
scala> treeToString(tree12)
```
