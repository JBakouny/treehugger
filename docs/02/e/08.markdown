Types, Annotations, and Assignments
-----------------------------------

### Typed expressions

Typed expressions are written using `withType(typ|"C")`:

```scala
LIT(0) withType(LongClass)   // (0: Long)
```

### Structural types

Structural types are written using `STRUCTURAL(tree, ...)`:

```scala
REF("x") withType(STRUCTURAL(
  DEF("close", UnitClass)
))
```

This prints as:

```scala
(x: ({ def close: Unit }))
```

### Type projections

Type projections are written by calling `TYPE_#` on a type:

```scala
REF("x") withType(STRUCTURAL(
  TYPE("L") withTypeParams(TYPE("A")) :=
    REF("Const") TYPEAPPLY ("M", "A")
) TYPE_#("L"))
```

This prints as:

```scala
(foo: ({ type L[A] = Const[M, A] })#L)
```

### Annotated expressions

Annotated expressions are written using `withAnnots(annot, ...)`:

```scala
REF("e") withAnnots(ANNOT(UncheckedClass))
```

This prints as:

```scala
(e: @unchecked)
```

Annotations are covered later in details.

### Assignments

Assignments are written using `:=`:

```scala
REF("x") := LIT(0)           // x = 0 
```
