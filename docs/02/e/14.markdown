---
out: typelevelexp.html
---

  [1]: stdtypcon.html

Type-Level Expressions
----------------------

### Type references

Use `TYPE_REF(tree|sym|"C")` to explicitly convert symbols, names, and trees into types:

```
(VAL("pos", TYPE_REF(REF("board") DOT "Coord")): Tree)
```

This prints as:

```
val pos: board.Coord
```

### Applied types

Applied types are written by calling `TYPE_OF(typ|"C", ...)` on a type:

```scala
REF("x") withType(ListClass TYPE_OF IntClass)
```

This prints as:

```scala
(x: List[Int])
```

### Type constructors

treehugger DSL provides built-in type constructors, which will be covered more [later][1]:

```
REF("x") withType(TYPE_LIST(IntClass))
REF("y") withType(TYPE_TUPLE(IntClass, IntClass))
REF("z") withType(IntClass TYPE_=> IntClass)
```

These examples print as:

```scala
(x: List[Int])
(y: (Int, Int))
(z: Int => Int)
```

### Structural types

Structural types are written using `TYPE_STRUCT(tree, ...)`:

```scala
REF("x") withType(TYPE_STRUCT(
  DEF("close", UnitClass)
))
```

This prints as:

```scala
(x: ({ def close: Unit }))
```

### Type projections

Type projections are written by calling `TYPE_# (typ|"C")` on a type:

```scala
REF("x") withType(TYPE_STRUCT(
  TYPEVAR("L") withTypeParams(TYPEVAR("A")) :=
    REF("Const") APPLYTYPE ("M", "A")
) TYPE_#("L"))
```

This prints as:

```scala
(foo: ({ type L[A] = Const[M, A] })#L)
```

### Existential types

Existential types are written by calling `TYPE_FORSOME(tree, ...)` on a type:

```scala
(DEF("foo")
  withParams(PARAM("arg", TYPE_LIST(
    TYPE_REF(REF("x") DOT "T")) TYPE_FORSOME(
    VAL("x", "Outer")
)))).tree
```

This prints as:

```scala
def foo(arg: List[x.T] forSome { val x: Outer })
```

