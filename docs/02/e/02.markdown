---
out: apply.html
---

Function Applications
---------------------

There are two ways to write function applications. The first way is calling `APPLY(arg, ...)` on a symbol or a tree. Here, `arg` denotes a `Tree`:

```console:new
scala> import treehugger.forest._, definitions._, treehuggerDSL._
scala> val tree = Predef_println APPLY LIT("Hello, world!")
scala> treeToString(tree)
scala> val tree2 = (REF("x") DOT "y") APPLY (LIT(0), LIT(1))
scala> treeToString(tree2)
```

### Function application on selections

The second way is to apply `arg, ...` on intermediate structure returned by `DOT(sym|"y")`:

```console
scala> val tree3 = (REF("x") DOT "y")(LIT(0), LIT(1))
scala> treeToString(tree3)
```

### Sequence arguments

To pass sequence into a vararg parameter, use `SEQARG(arg)`:

```console
scala> val tree4 = THIS APPLY (SEQARG(REF("list")))
scala> treeToString(tree4)
```

### Named arguments

To pass named arguments into a function, specify the parameter using `REF(sym|"x")` as follows:

```console
scala> val tree5 = REF("put") APPLY (REF("x") := LIT(0))
scala> treeToString(tree5)
```

### Partially applied functions

Partially applied functions are written by calling `APPLY` with `PARTIALLY`:

```console
scala> val tree6 = REF("put") APPLY PARTIALLY
scala> treeToString(tree6)
```

Note this is different from `APPLY`ing `WILDCARD` since `PARTIALLY` applies to the entire parameter list.
