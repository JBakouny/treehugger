---
out: modifiers.html
---

Modifiers
---------

Many of the `Tree` objects has `Modifier` field, which adds extra attribute about the tree such as access level and mutability. For both classes and their members modifier flags can be given using `withFlags(...)`, which takes a `PRIVATEWITHIN` or vararg of `Long`.

### Access modifiers

To define class members with access modifiers use `Flags.PRIVATE`, `Flags.PROTECTED`, and `PRIVATEWITHIN("scope")`:


```console:new
scala> import treehugger.forest._, definitions._, treehuggerDSL._
scala> val tree = CLASSDEF("C") := BLOCK(
  DEF("x") withFlags(Flags.PRIVATE) := LIT(0),
  DEF("y") withFlags(Flags.PROTECTED) := LIT(0),
  DEF("z") withFlags(PRIVATEWITHIN("this")) := LIT(0) 
)
scala> treeToString(tree)
```

### Overriding

To override class members use `Flags.OVERRIDE`:

```console
scala> val tree2 = CLASSDEF("C") withParents("B") := BLOCK(
  DEF("x") withFlags(Flags.OVERRIDE) := LIT(0)
)
scala> treeToString(tree2)
```

### Final members

To prohibit overriding by subclasses class members are marked `final` using `Flags.FINAL`:

```console
scala> val tree3 = CLASSDEF("C") := BLOCK(
  DEF("x") withFlags(Flags.FINAL) := LIT(0)
)
scala> treeToString(tree3)
```

### Abstract classes

To define abstract classes use `Flags.ABSTRACT` on `CLASSDEF(...)`:

```console
scala> object sym {
  val IntQueue: ClassSymbol = RootClass.newClass("IntQueue")  
}
scala> val tree4 = CLASSDEF(sym.IntQueue) withFlags(Flags.ABSTRACT) := BLOCK(
  DEF("get", IntClass),
  PROC("put") withParams(PARAM("x", IntClass))
)
scala> treeToString(tree4)
```

### Final classes

To define final classes, which prohibits extension, use `Flags.FINAL` on `CLASSDEF(...)`:

```console
scala> val tree5 = (CLASSDEF("C") withFlags(Flags.FINAL): Tree)
scala> treeToString(tree5)
```

### Sealed classes

To define sealed classes use `Flags.SEALED` on `CLASSDEF(...)`:

```console
scala> val tree6 = CLASSDEF("Animal") withFlags(Flags.ABSTRACT, Flags.SEALED)
scala> treeToString(tree6)
```

### Private constructors

To define private constructors use `Flags.PRIVATE` with `withCtorFlags(...)` on `CLASSDEF(...)`:

```console
scala> val tree7 = (CLASSDEF("C") withCtorFlags(Flags.PRIVATE)
  withParams(PARAM("x", IntClass)): Tree)
scala> treeToString(tree7)
```
